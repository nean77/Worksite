//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Worksite
{
    using System;
    using System.Collections.Generic;
    using System.Linq;

    public partial class ServiceOrder
    {
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Usage", "CA2214:DoNotCallOverridableMethodsInConstructors")]
        public ServiceOrder()
        {
            this.ServiceOrders_ServiceStatuses = new HashSet<ServiceOrders_ServiceStatuses>();
            this.ServiceOrders_ServiceTypes = new HashSet<ServiceOrders_ServiceTypes>();
        }

        public long ServiceOrderId { get; set; }
        public long CustomerId { get; set; }
        public long DeviceId { get; set; }
        public System.DateTime OpenDate { get; set; }
        public Nullable<System.DateTime> CloseDate { get; set; }
        public string Description { get; set; }
        public Nullable<long> UserId { get; set; }
        public System.DateTime CreatedDateTime { get; set; }

        public virtual Customer Customer { get; set; }
        public virtual Device Device { get; set; }
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Usage", "CA2227:CollectionPropertiesShouldBeReadOnly")]
        public virtual ICollection<ServiceOrders_ServiceStatuses> ServiceOrders_ServiceStatuses { get; set; }
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Usage", "CA2227:CollectionPropertiesShouldBeReadOnly")]
        public virtual ICollection<ServiceOrders_ServiceTypes> ServiceOrders_ServiceTypes { get; set; }
        public virtual User User { get; set; }

        public override string ToString()
        {
            return base.ToString();
        }
        public override bool Equals(object obj)
        {
            try
            {
                ServiceOrder so = obj as ServiceOrder;

                if (CustomerId == so.CustomerId &&
                    DeviceId == so.DeviceId &&
                    OpenDate == so.OpenDate &&
                    CloseDate == so.CloseDate &&
                    Description == so.Description &&
                    UserId == so.UserId &&
                    ServiceOrders_ServiceStatuses.FirstOrDefault().ServiceStatusId == so.ServiceOrders_ServiceStatuses.FirstOrDefault().ServiceStatusId)
                {
                    return true;
                }
            }
            catch(Exception)
            {
                return false;
            }
            return false;
        }
    }
}
